pipeline {
    agent any

    parameters {
       booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
       
    }
    
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        TF_IN_AUTOMATION      = '1'
        BASTION_ID = credentials('bastion_id')
        BASTION_ID_PUB = credentials('bastion_id_pub')
        JENKINS_PUB_KEY = credentials('jenkins_pub_key')
        BASTION_PUB_IP = ''
    }
    
     stages {


        stage('Clone') {
            steps {
                git branch: 'main', url: 'https://github.com/exxmanster/spark.git'
     }
   }     

        stage('Plan') {
            steps {
                dir('terraform') {     
                sh 'pwd'
                sh 'echo $BASTION_ID'
                sh 'cp $BASTION_ID ./'
                sh 'cp $BASTION_ID_PUB ./'
                sh 'echo $JENKINS_PUB_KEY > id_rsa.pub'
                sh 'ls -la'
                sh 'terraform init -input=false'
                sh 'terraform plan -input=false -out tfplan'
                sh 'terraform show -no-color tfplan > tfplan.log'
           }
        }
    } 

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                dir('terraform') {
                    sh 'pwd'
                script {
                    def plan = readFile 'tfplan.log'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
              }
            }
        }

       
        stage('Apply') {
            steps {
                dir('terraform') {
                    sh 'pwd'
                    sh "terraform apply -input=false tfplan"
                    sh "BASTION_PUB_IP=\$(terraform output -json | jq -r .bastion_pub_ip.value)"
                    sh 'echo \$BASTION_PUB_IP'
                    

                    
            }
         } 
       }
   
   
    
        stage('Ansible') {
            steps {
                 dir('terraform') {
                    sh "mv bastion_id id_rsa"
                    sh '''
                       ssh -o StrictHostKeyChecking=no ec2-user@\$(terraform output -json | jq -r .bastion_pub_ip.value) <<EOF
                       sudo cp bastion_id .ssh/id_rsa && chmod 600 .ssh/id_rsa
                       sudo yum update -y && sudo yum install -y git python3-pip && pip3 install ansible boto3
                       sudo ansible-galaxy collection install amazon.aws
                       git clone https://github.com/exxmanster/Ansible_playground.git
                       ls -la 
                       cd Ansible_playground
                       ansible-playbook playbook.yml
                       cd && rm -rf Ansible_playground
                      
                       '''
                
                
                 }

                    
         } 
       }
 }
 
}